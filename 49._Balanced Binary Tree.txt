Given a binary tree, determine if it is height-balanced

Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: true

Example 2:

Input: root = [1,2,2,3,3,null,null,4,4]
Output: false
Example 3:

Input: root = []
Output: true
 

Solution - 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */


class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root == null){
            return true;
        }
         if(fun(root) != -1){
            return true;
         }
         return false;

    }

    public int fun(TreeNode root){
    if(root == null){
        return 0;
    }

    int left= fun(root.left);
    int right = fun(root.right);

    if(left == -1 || right == -1){
        return -1;
    }
    
    if(Math.abs(left-right)>1){
        return -1;
    }

    return Math.max(left, right) +1; 

    }
}












