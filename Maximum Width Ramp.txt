Maximum Width Ramp

A ramp in an integer array nums is a pair (i, j) for which i < j and nums[i] <= nums[j]. The width of such a ramp is j - i.

Given an integer array nums, return the maximum width of a ramp in nums. If there is no ramp in nums, return 0.


Example 1:

Input: nums = [6,0,8,2,1,5]
Output: 4
Explanation: The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5.
Example 2:

Input: nums = [9,8,1,0,1,9,4,0,4,1]
Output: 7
Explanation: The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1.


Solution -


import java.util.Stack;

class Solution {
    public int maxWidthRamp(int[] nums) {
        int n = nums.length;
        Stack<Integer> stack = new Stack<>();

        // First pass: Push indices of potential left boundaries into the stack
        // We only push indices where the value is smaller than the previous stack top

        for (int i = 0; i < n; i++) {
            if (stack.isEmpty() || nums[stack.peek()] > nums[i]) {
                stack.push(i);
            }
        }

        int ans = 0;

        // Second pass: Iterate from right to left to find the maximum width ramp

        for (int j = n - 1; j > 0; j--) {

            // While the stack is not empty and the current element is greater 
            //than or equal to the stack top

            while (!stack.isEmpty() && nums[stack.peek()] <= nums[j]) {
                // Calculate the width of the ramp and update the maximum
                ans = Math.max(ans, j - stack.peek());
                // Remove the top element as we've found a valid ramp for it
                stack.pop();
            }
        }

        // Return the maximum width ramp found
        return ans;
    }
}