Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.

 
Example 1:


Input: root = [4,2,6,1,3]
Output: 1
Example 2:


Input: root = [1,0,48,null,null,12,49]
Output: 1


Solution - 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    int min=100001;
    ArrayList<Integer> arr=new ArrayList<>();
    public int minDiffInBST(TreeNode root) {
        findAns(root);
        return min;
    }
    void findAns(TreeNode root) {
        if (root.left!=null) findAns(root.left);
        arr.add(root.val);
        if(arr.size()>1) 
            min=Math.min(min,(arr.get(arr.size()-1)-arr.get(arr.size()-2)));
        if (root.right!=null) findAns(root.right);
    }
}