Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.


Solution - 


class Solution {
    public boolean isValidSudoku(char[][] board) {

        //step 1 : initialize boolean matrices for row , column and sub boxes

    boolean[][] rows = new boolean[9][9];
    boolean[][] columns = new boolean[9][9];
    boolean[][] subBoxes = new boolean[9][9];

    //Step 2 : Iterate over each cell in the 9x9 board

    for(int i=0;i<9;i++)
    {
        for(int j=0;j<9;j++)
        {
          
          if(board[i][j]!='.')
          {
            int num = board[i][j] - '1';
            
            //Step 3 : Calculate sub-box index
            int boxIndex = (i/3)*3 + (j/3);

            //Step 4 : check for duplicates 
            if(rows[i][num] || columns[j][num] || subBoxes[boxIndex][num])
            {
                return false;
            }

            
            rows[i][num] = true;
            columns[j][num] = true;
            subBoxes[boxIndex][num] = true;
          }

        //Step 5 : mark the digits as seen

            }
        }
        return true;

    }
}